{"version":3,"sources":["services/persons.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","search","setSearch","notification","setNotification","useEffect","personService","initialData","updateNumber","person","changedPerson","number","window","confirm","name","map","prs","catch","error","setTimeout","message","handleSearch","e","Object","values","filter","toLowerCase","includes","target","value","addPerson","preventDefault","formName","document","getElementById","formNum","personObj","i","length","console","log","returnedPerson","concat","handlePersonChange","handleNumChange","deleteEntry","updated","p","Search","props","onChange","Form","onSubmit","type","Display","key","People","onClick","Notification","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.05710ef2.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data);\n}\n\n\nexport default {getAll, create, remove, update}\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport personService from './services/persons';\nimport './index.css';\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [search, setSearch] = useState(persons);\n  const [notification, setNotification] = useState(null);\n\n  useEffect(() => {\n    personService\n    .getAll()\n    .then(initialData => {\n      setPersons(initialData);\n    });\n  }, []);\n\n  const addPerson = (e) => {\n    e.preventDefault();\n    let formName = document.getElementById(\"name\");\n    let formNum = document.getElementById(\"num\")\n    let personObj = {}\n\n    for(let i = 0; i < persons.length; i++){\n      if(persons[i].name === newName && persons.length !== 0){\n        console.log(\"same number\", personObj.number)\n        return updateNumber(persons[i], newNumber);\n      } \n    }\n        personObj = {\n          name: newName,\n          number: newNumber,\n      }\n\n    personService\n      .create(personObj)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n      })\n    formName.value = \"\";\n    formNum.value = \"\";\n    setNotification(`added ${newName}`)\n  }\n\n  const updateNumber = (person, newNumber) =>{\n    const changedPerson = { ...person, number: newNumber}\n    if (window.confirm(`${person.name} is already added to phonebook. Update number?`)){\n      personService\n        .update(person.id, changedPerson)\n        .then(changedPerson => {\n          setPersons(persons.map(prs => prs.id !== person.id ? prs : changedPerson))\n        })\n        .catch(error => {\n          setNotification(`${person.name} has been has already been removed from the server`)\n        });\n        setNotification(\"Entry updated\");\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000);\n    }\n  }\n\n  const handlePersonChange = (e) => {\n    setNewName(e.target.value)\n  }\n  const handleNumChange = (e) => {\n    setNewNumber(e.target.value)\n  }\n\n  const handleSearch = (e) => {\n    if(e){\n      setSearch(Object.values(persons).filter(person =>  \n        person.name.toLowerCase().includes(e.target.value.toLowerCase())))\n    }\n  }\n  useEffect(() => {\n    setSearch(persons);\n  }, [persons]);\n\n  const deleteEntry = (id) => {\n    if (window.confirm(\"Are you sure you want to delete?\")){\n      personService\n        .remove(id)\n        const updated = persons.filter(p => p.id !== id);\n        setPersons(updated)\n        setNotification(\"Entry deleted\")\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n    } \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} />\n      <Search handleSearch={handleSearch} />\n      <Form persons={persons} \n            addPerson={addPerson} \n            handlePersonChange={handlePersonChange} \n            handleNumChange={handleNumChange}/>\n      <Display persons={search} deleteEntry={deleteEntry}/>\n    </div>\n  )\n}\n\nconst Search = (props) => {\n\n  return (\n    <form>\n      <div>\n        <input onChange={props.handleSearch} />\n      </div>\n    </form>\n  )\n}\n\nconst Form = (props) => {\n  return (\n    <>\n    <h3>Add new to phonebook</h3>\n      <form onSubmit={props.addPerson}>\n        <div>\n          name: <input value={props.newName} onChange={props.handlePersonChange} id=\"name\" />\n        </div>\n        <div>\n          number: <input value={props.newNumber} onChange={props.handleNumChange} id=\"num\" />\n        </div>\n        <div>\n          <button type=\"submit\" >Add</button>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst Display = ({persons, deleteEntry}) => {\n  return (\n    <>\n      <h3>Numbers</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Number</th>\n          </tr>\n        </thead>\n        <tbody>\n          {persons.map(person => \n            <tr key={person.name}>\n              <People person={person} key={person.id} deleteEntry={deleteEntry} />\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nconst People = ({person, deleteEntry}) => {\n  return (\n    <>\n      <td>{person.name}</td>\n      <td>{person.number}</td>\n      <td><button id=\"deleteBtn\" onClick={() => deleteEntry(person.id)}>Delete</button></td>\n    </>\n  )\n}\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}